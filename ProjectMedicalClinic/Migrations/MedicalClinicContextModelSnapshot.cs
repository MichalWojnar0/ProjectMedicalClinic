// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectMedicalClinic.Models;

#nullable disable

namespace ProjectMedicalClinic.Migrations
{
    [DbContext(typeof(MedicalClinicContext))]
    partial class MedicalClinicContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProjectMedicalClinic.Models.Appointment", b =>
                {
                    b.Property<int>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppId"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("AppId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RoomId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            AppId = 1,
                            AppointmentDate = new DateTime(2024, 7, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            DoctorId = 1,
                            Notes = "Follow-up appointment",
                            PatientId = 1,
                            RoomId = 1
                        },
                        new
                        {
                            AppId = 2,
                            AppointmentDate = new DateTime(2024, 7, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            DoctorId = 2,
                            Notes = "Initial consultation",
                            PatientId = 2,
                            RoomId = 2
                        },
                        new
                        {
                            AppId = 3,
                            AppointmentDate = new DateTime(2024, 7, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            DoctorId = 3,
                            Notes = "Check-up appointment",
                            PatientId = 3,
                            RoomId = 3
                        },
                        new
                        {
                            AppId = 4,
                            AppointmentDate = new DateTime(2024, 7, 6, 0, 0, 0, 0, DateTimeKind.Local),
                            DoctorId = 1,
                            Notes = "Procedure follow-up",
                            PatientId = 3,
                            RoomId = 2
                        },
                        new
                        {
                            AppId = 5,
                            AppointmentDate = new DateTime(2024, 7, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            DoctorId = 3,
                            Notes = "Diagnostic discussion",
                            PatientId = 2,
                            RoomId = 1
                        });
                });

            modelBuilder.Entity("ProjectMedicalClinic.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"));

                    b.Property<string>("DocAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("int");

                    b.HasKey("DoctorId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            DoctorId = 1,
                            DocAddress = "123 Main St, Hometown",
                            DocFirstName = "John",
                            DocLastName = "Doe",
                            DocPhoneNumber = "555-1234",
                            Specialization = "Cardiology",
                            YearsOfExperience = 20
                        },
                        new
                        {
                            DoctorId = 2,
                            DocAddress = "456 Elm St, Hometown",
                            DocFirstName = "Jane",
                            DocLastName = "Smith",
                            DocPhoneNumber = "555-5678",
                            Specialization = "Pediatrics",
                            YearsOfExperience = 15
                        },
                        new
                        {
                            DoctorId = 3,
                            DocAddress = "789 Oak St, Hometown",
                            DocFirstName = "Emily",
                            DocLastName = "Johnson",
                            DocPhoneNumber = "555-9101",
                            Specialization = "Dermatology",
                            YearsOfExperience = 10
                        },
                        new
                        {
                            DoctorId = 4,
                            DocAddress = "101 Pine St, Hometown",
                            DocFirstName = "Michael",
                            DocLastName = "Brown",
                            DocPhoneNumber = "555-1122",
                            Specialization = "Neurology",
                            YearsOfExperience = 25
                        },
                        new
                        {
                            DoctorId = 5,
                            DocAddress = "202 Birch St, Hometown",
                            DocFirstName = "Sarah",
                            DocLastName = "Williams",
                            DocPhoneNumber = "555-3344",
                            Specialization = "Orthopedics",
                            YearsOfExperience = 18
                        },
                        new
                        {
                            DoctorId = 6,
                            DocAddress = "303 Cedar St, Hometown",
                            DocFirstName = "David",
                            DocLastName = "Miller",
                            DocPhoneNumber = "555-7788",
                            Specialization = "General Surgery",
                            YearsOfExperience = 12
                        });
                });

            modelBuilder.Entity("ProjectMedicalClinic.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentMedications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientId");

                    b.HasIndex("DoctorId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            PatientId = 1,
                            Address = "123 Main St, Warsaw, Poland",
                            CurrentMedications = "Lisinopril, Albuterol",
                            DateOfBirth = new DateTime(1985, 5, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Michał",
                            Gender = "Male",
                            LastName = "Guest",
                            PhoneNumber = "123-456-7890"
                        },
                        new
                        {
                            PatientId = 2,
                            Address = "456 Elm St, Krakow, Poland",
                            CurrentMedications = "Metformin",
                            DateOfBirth = new DateTime(1990, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Anna",
                            Gender = "Female",
                            LastName = "Kowalski",
                            PhoneNumber = "987-654-3210"
                        },
                        new
                        {
                            PatientId = 3,
                            Address = "789 Oak St, Gdansk, Poland",
                            CurrentMedications = "Atorvastatin",
                            DateOfBirth = new DateTime(1975, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "John",
                            Gender = "Male",
                            LastName = "Smith",
                            PhoneNumber = "555-123-4567"
                        });
                });

            modelBuilder.Entity("ProjectMedicalClinic.Models.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomId"));

                    b.Property<string>("Floor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("RoomId");

                    b.HasIndex("PatientId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            RoomId = 1,
                            Floor = "First",
                            Name = "Room A",
                            PatientId = 1
                        },
                        new
                        {
                            RoomId = 2,
                            Floor = "Second",
                            Name = "Room B",
                            PatientId = 2
                        },
                        new
                        {
                            RoomId = 3,
                            Floor = "Third",
                            Name = "Room C",
                            PatientId = 3
                        });
                });

            modelBuilder.Entity("ProjectMedicalClinic.Models.Appointment", b =>
                {
                    b.HasOne("ProjectMedicalClinic.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectMedicalClinic.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectMedicalClinic.Models.Room", "Room")
                        .WithMany("Appointments")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("ProjectMedicalClinic.Models.Patient", b =>
                {
                    b.HasOne("ProjectMedicalClinic.Models.Doctor", null)
                        .WithMany("Patients")
                        .HasForeignKey("DoctorId");
                });

            modelBuilder.Entity("ProjectMedicalClinic.Models.Room", b =>
                {
                    b.HasOne("ProjectMedicalClinic.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ProjectMedicalClinic.Models.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("ProjectMedicalClinic.Models.Patient", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("ProjectMedicalClinic.Models.Room", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
